name: ci

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  pre-commit:
    name: pre-commit (ruff/black/isort/mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-
      - name: Install pre-commit
        run: python -m pip install --upgrade pip pre-commit
      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.1

  # tests:
  #   name: pytest
  #   runs-on: ubuntu-latest
  #   needs: pre-commit

  #   services:
  #     postgres:
  #       image: postgres:16
  #       env:
  #         POSTGRES_DB: vitally_test
  #         POSTGRES_USER: vitally
  #         POSTGRES_PASSWORD: vitally
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd="pg_isready -U vitally -d vitally_test"
  #         --health-interval=10s
  #         --health-timeout=5s
  #         --health-retries=20

  #   env:
  #     PYTHONPATH: ${{ github.workspace }}
  #     DATABASE_URL: postgresql+psycopg://vitally:vitally@localhost:5432/vitally_test

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.13"

  #     - name: Cache pip
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install -U pip
  #         pip install -r requirements.txt
  #         pip install pytest pytest-cov
  #         # opcional (se n√£o estiver no requirements)
  #         # pip install "psycopg[binary]~=3.2"

  #     - name: Check DB connectivity
  #       run: |
  #         python - << 'PY'
  #         import os
  #         from sqlalchemy import create_engine, text
  #         url = os.environ["DATABASE_URL"]
  #         eng = create_engine(url, pool_pre_ping=True)
  #         with eng.begin() as conn:
  #           conn.execute(text("SELECT 1"))
  #         print("DB OK:", url)
  #         PY

  #     - name: Run tests
  #       run: |
  #         pytest -v -ra --cov=src --cov-report=xml --cov-report=term-missing
